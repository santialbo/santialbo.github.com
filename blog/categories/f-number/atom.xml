<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: F# | Santi Albo]]></title>
  <link href="http://santialbo.com/blog/categories/f-number/atom.xml" rel="self"/>
  <link href="http://santialbo.com/"/>
  <updated>2013-06-18T14:09:07+02:00</updated>
  <id>http://santialbo.com/</id>
  <author>
    <name><![CDATA[Santi Albo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Monads in F#]]></title>
    <link href="http://santialbo.com/blog/2013/03/27/monads-in-f-sharp/"/>
    <updated>2013-03-27T16:04:00+01:00</updated>
    <id>http://santialbo.com/blog/2013/03/27/monads-in-f-sharp</id>
    <content type="html"><![CDATA[<p>When I first tried to learn what monads were, I probably made the mistake of going to wikipedia, which only made things worse. It was not until I began to play with <a href="/blog/2013/03/24/introduction-to-parser-combinators/">parser combinators</a> that I started to grasp the concept.</p>

<h3>What are monads?</h3>

<p>You probably heard the word <em>monad</em> if you have dealt with functional programming.
However, to me the word is rather obscure, and might sound a little daunting to people starting in functional programming. This is one of the reasons why the creators of F# decided to avoid this term and use the word <em>workflow</em> or <em>computation expression</em> instead.</p>

<p><em>Ok... but what are they?</em></p>

<p>Basically, monads are just a typeclass and two fundamental operations associated. Think of a generic interface with two abstract methods. These operations have the following syntax:</p>

<p><code>fsharp
Return: 'a -&gt; M&lt;'a&gt;
Bind: M&lt;'a&gt; -&gt; ('a -&gt; M&lt;'b&gt;) -&gt; M&lt;'b&gt;
</code></p>

<!--more-->


<p>If you have a type <code>M&lt;'a&gt;</code> and two methods with those signatures, then you've got a monad. (Actually there are <a href="http://en.wikipedia.org/wiki/Monad_%28functional_programming%29#Monad_laws">a couple rules</a> these two methods must obey, but we will skip them since they might complicate things.)</p>

<p>The classical example is the <em>Maybe</em>/<em>Option</em> monad. In F#, it can be defined as follows:</p>

<p>```fsharp
// Note that type annotations are optional. I made them explicity for clarity.
type Maybe&lt;'a> =</p>

<pre><code>| Just of 'a
| Nothing
</code></pre>

<p>let Return (x: 'a) : Maybe&lt;'a> =</p>

<pre><code>Just(x)
</code></pre>

<p>let Bind (mx: Maybe&lt;'a>) (f: 'a -> Maybe&lt;'b>) : Maybe&lt;'b> =</p>

<pre><code>match mx with
| Just(x) -&gt; f x
| Nothing -&gt; Nothing
</code></pre>

<p>```</p>

<p>which may suffice within the pages of a textbook, but it didn't make things any clearer to me. Instead, I am going to explain how the usage of monads makes a lot of sense when dealing parser combinators. (If you want to keep reading about the Maybe monad example you can go to <a href="http://en.wikipedia.org/wiki/Monad_%28functional_programming%29#Motivating_examples">the wikipedia entry about monads</a>).</p>

<h3>Monads and parser combinators</h3>

<p>If you don't know what parser combinators are, you can read <a href="/blog/2013/03/24/introduction-to-parser-combinators/">my previous blog post</a> to get a quick overview.</p>

<p>So we have the following type definition:</p>

<p>```fsharp
type ParserResult&lt;'a> =</p>

<pre><code>| Success of 'a * list&lt;char&gt;
| Failure
</code></pre>

<p>type Parser&lt;'a> = list<char> -> ParserResult&lt;'a>
<code>``
That means that a</code>Parser<code>is just a function that takes a list of characters and returns a</code>ParserResult&lt;'a><code>, which can be either a</code>Failure<code>if nothing could be parsed or a</code>Success` otherwise, returning both the parsed element and the rest of the list.</p>

<p>Now that we have the typeclass <code>Parser</code>, we only need to define the associated <code>Return</code> and <code>Bind</code> operations:</p>

<p>```fsharp
let Return (x: 'a): Parser&lt;'a> =</p>

<pre><code>let p stream = Success(x, stream)
in p
</code></pre>

<p>let Bind (p: Parser&lt;'a>) (f: 'a -> Parser&lt;'b>) : Parser&lt;'b> =</p>

<pre><code>let q stream =
    match p stream with
    | Success(x, rest) -&gt; (f x) rest
    | Failure -&gt; Failure
in q
</code></pre>

<p>```</p>

<p>TA-DAA! There's a monad. It is standard notation, though, to use the operator <code>&gt;&gt;=</code> for the <code>Bind</code> operation. We can define it too:</p>

<p><code>fsharp
let (&gt;&gt;=) = Bind
</code></p>

<p><em>Cool, but how is this useful?</em></p>

<p>Those functions we just defined allow us to define the following parser combinators in a very concise way:</p>

<p>```fsharp
/// If parser p succeeds, returns x as a result.
let (>>%) p x : Parser&lt;'b> =</p>

<pre><code>p &gt;&gt;= (fun _ -&gt; Return x)
</code></pre>

<p>/// Applies parsers p1 and p2, returning the result of p2.
let (>>.) p1 p2 : Parser&lt;'b> =</p>

<pre><code>p1 &gt;&gt;= (fun _ -&gt; p2)
</code></pre>

<p>/// Applies parsers p1 and p2, returning the result of p1.
let (.>>) p1 p2 : Parser&lt;'a> =</p>

<pre><code>p1 &gt;&gt;= (fun x -&gt; p2 &gt;&gt;% x)
</code></pre>

<p>/// Applies parsers p1 and p2, returning both results.
let (.>>.) p1 p2: Parser&lt;'a*'b> =</p>

<pre><code>p1 &gt;&gt;= (fun x -&gt; p2 &gt;&gt;= (fun y -&gt; Return (x, y)))
</code></pre>

<p>```</p>

<p>Notice that the <em>Bind</em> operator <code>&gt;&gt;=</code> is used twice in the definition of the <code>.&gt;&gt;.</code> operator. Unfortunately, this gets harder to read as the complexity of parsers increases. This is why Haskell introduced the <em>do-notation</em> (<em>perform-notation</em> in OCaml or <em>computation expressions</em> in F#), which is a syntactic sugar that tries to mimick the imperative-style laguages. Basically, it allows you to write a series of simple <em>statements</em> instead of a nested series of <code>&gt;&gt;=</code> operations.</p>

<h3>Workflows</h3>

<p>In order to use the F#'s equivalent to the <em>do-notation</em>, we need to create a <em>workflow builder</em>. Workflow builders are just an interface that we have to implement. Two methods are required; the rest are optional. These two methods are <code>Return</code> and <code>Bind</code> as you might have guessed. This is how we can define the <code>parse</code> workflow:</p>

<p>```fsharp
// Note that we previously defined Bind and Return.
type ParserBuilder() =</p>

<pre><code>member x.Bind(p, f) = Bind p f
member x.Return(y) = Return y
</code></pre>

<p>let parse = new ParserBuilder()
```</p>

<p>and this is how we use it to define the <code>Many</code> parser combinator in a more readable way than thre previous blog post.</p>

<p>```fsharp
// This is the Either combinator defined in the previous blog post.
let (&lt;|>) = Either</p>

<p>let rec Many p : Parser&lt;list&lt;'a>> =</p>

<pre><code>parse {
    let! x = p          // Applies p
    let! xs = (Many p)  // Applies (Many p) recursively
    return x :: xs      // returns the cons of the two results
} &lt;|&gt; Return []
</code></pre>

<p>```</p>

<p>or the following <code>Many1</code> combinator, which is similar to the <code>Many</code> combinator but requires at least one success (Think of <code>*</code> vs <code>+</code> in regular expressions):</p>

<p>```fsharp
let Many1 p : Parser&lt;list&lt;'a>> =</p>

<pre><code>parse {
    let! x = p          // Applies p
    let! xs = (Many p)  // Applies (Many p) recursively
    return x :: xs      // returns the cons of the two results
}
</code></pre>

<p>```</p>

<p>or even more complex parsers such a this floating point number parser:</p>

<p>```fsharp
/// Parses float numbers which match /[+-]?(\d+(.\d<em>)?|\d</em>.\d+)([eE][+-]?\d+)?/
let FloatParser: Parser<float> =</p>

<pre><code>parse {
    let! s = (CharParser '+' &lt;|&gt; CharParser '-') &lt;|&gt; Return '+'     // [+-]?
    let! l = (parse {                                               // (
        let! l = Many1 DigitParser                                  //   \d+
        let! pd = (parse {                                          //   (
            let! p = CharParser '.'                                 //     \.
            let! d = Many DigitParser                               //     \d*
            return p::d
            } &lt;|&gt; Return [])                                        //   )?
        return l @ pd
        } &lt;|&gt;                                                       //   |
        parse {
            let! l = Many DigitParser                               //   \d*
            let! p = CharParser '.'                                 //   \.
            let! d = Many1 DigitParser                              //   \d+
            return l @ p::d
        }                                                           // )
    )
    let! e = (parse {                                               // (
        let! e = CharParser 'e' &lt;|&gt; CharParser 'E'                  //   [eE]
        let! s = (CharParser '+' &lt;|&gt; CharParser '-') &lt;|&gt; Return '+' //   [+-]?
        let! x = Many1 (DigitParser)                                //   \d+
        return e::s::x                                              // )?
    } &lt;|&gt; Return [])
    return float (new System.String(s::(l @ e) |&gt; List.toArray))
}
</code></pre>

<p>```</p>

<p>which allows us to do the following parsing:</p>

<p>```fsharp</p>

<blockquote><p>printfn "%A" (FloatParser ("-1.23e45" |> Seq.toList));;
Success (-1.23e+45,[])
```</p></blockquote>

<p>Imagine if we had to write the previous parser with nested <code>&gt;&gt;=</code> operators...</p>

<h3>Conclusion</h3>

<p>I think we can summarize the post in the following points:</p>

<ul>
<li>The word <em>monad</em> is cool but gives no clue of what they actually are. Other languages have chosen more descriptive names such as <em>workflows</em>.</li>
<li>A monad is just an <a href="http://en.wikipedia.org/wiki/Interface_%28Java%29"><em>interface</em></a> with certain rules in the implementation of its methods.</li>
<li>Parser combinators are a good example of the usage of monads.</li>
<li>Monads without the <em>do-notation</em> would be a pain in the ass.</li>
</ul>


<p>All the code snippets are available <a href="http://tryfs.net/snippets/snippet-hB">here</a> for easy access and testing.</p>

<p><em>Wow, that was long.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to parser combinators]]></title>
    <link href="http://santialbo.com/blog/2013/03/24/introduction-to-parser-combinators/"/>
    <updated>2013-03-24T23:45:00+01:00</updated>
    <id>http://santialbo.com/blog/2013/03/24/introduction-to-parser-combinators</id>
    <content type="html"><![CDATA[<p>So I have been playing with parser combinators for quite a while now and they felt so interesting that I wanted to write about them.</p>

<h3>What is a parser?</h3>

<p>Basically a parser is a function which accepts some sort of character input such a string or a character stream and returns some structure as output that contains the parsed result. It is as simple as it sounds, no intricacies here.</p>

<p>Parsers are used everywhere in software in order to interpret character sequences into complex structures. Some simple example are JSON and XML parsers, which take some string as argument and return the corresponding data structure.</p>

<p>Using F#, we can define a simple parser type as follows:</p>

<p>```fsharp
type ParserResult&lt;'a> =</p>

<pre><code>| Success of 'a * list&lt;char&gt; 
| Failure
</code></pre>

<p>type Parser&lt;'a> = list<char> -> ParserResult&lt;'a>
```</p>

<p>This means that a <code>Parser</code> will receive a <code>list&lt;char&gt;</code> and will return a <code>ParserResult&lt;'a&gt;</code> which can be either a <code>Failure</code> if nothing could be parsed or a <code>Success</code> otherwise and return both the parsed element and the rest of the list.</p>

<!--more-->


<p>Having this definition, we can now build our first parser:</p>

<p>```fsharp
/// If the stream starts with c, returns Success, otherwise returns Failure
let CharParser (c: char) : Parser<char> =</p>

<pre><code>let p stream =
    match stream with
    | x::xs when x = c -&gt; Success(x, xs)
    | _ -&gt; Failure
in p
</code></pre>

<p>```</p>

<p>which whill check if the given list starts with the specified element and if it does, returns a <code>Success</code> with both the element and the rest of the list. If it doesn't, it returns a <code>Failure</code>.</p>

<p><em>Wait... what? Is that a parser?</em></p>

<p>Yes! and is probably one of the most important. Here is how it works:</p>

<p>```fsharp</p>

<blockquote><p>(CharParser 'a') ['a'; 'b'; 'c']
val it : ParserResult<char> = Success ('a',['b'; 'c'])</p>

<p>(CharParser 'b') ['a'; 'b'; 'c']
val it : ParserResult<char> = Failure
```</p></blockquote>

<p>Simple and stupid by itself, but useful when used as a building block for more complex parsers.</p>

<p><em>Ok, you showed what a parser is, what are those parser combinators you mention in the title?</em></p>

<h3>Gluing parsers with parser combinators</h3>

<p>A parser combinator is a <a href="http://en.wikipedia.org/wiki/Higher-order_function">higher order function</a> that operates on one or more parsers in order to create a new parser.</p>

<p>Basically, parser combinators are the glue that allows us to mix small and simple parser in order to create more complex parsers that eventually, will allow us to parse whatever it is we want to parse.</p>

<p>We could, for example, define the following <code>Either</code> parser combinator:</p>

<p>```fsharp
/// If p1 fails uses p2, otherwise returns p1's result
let Either (p1: Parser&lt;'a>) (p2: Parser&lt;'a>) : Parser&lt;'a> =</p>

<pre><code>let p stream =
    match p1 stream with
    | Failure -&gt; p2 stream
    | res -&gt; res
in p
</code></pre>

<p>```</p>

<p>which builds a new parser that will try to use the first input parser and, if it fails, will use the second.</p>

<p>Imagine now, we would like to build a digit parser. Now that we have defined our <code>Either</code> operator we could define the parser as:</p>

<p>```fsharp
/// Parses any digit character
let DigitParser : Parser<char> =</p>

<pre><code>['0'..'9']
|&gt; List.map CharParser
|&gt; List.reduce Either
</code></pre>

<p>```</p>

<p>What if we wanted that parser to return an <code>int</code> instead? We could simply define our second parser combinator:</p>

<p>```fsharp
/// Applies the function f to the result of p if it succeeds
let Apply (p: Parser&lt;'a>) (f: 'a -> 'b) : Parser&lt;'b> =</p>

<pre><code>let q stream =
    match p stream with
    | Success(x, rest) -&gt; Success(f x, rest)
    | Failure -&gt; Failure
in q
</code></pre>

<p>```</p>

<p>and now we could use it to define a new digit parser:</p>

<p><code>fsharp
let DigitParserInt = Apply DigitParser (fun c -&gt; (int c) - (int '0'))
</code></p>

<p>But parsing only a single character is not very useful so we could build the following combinator</p>

<p>```fsharp
/// Applies p as many times as possible
let rec Many (p: Parser&lt;'a>) : Parser&lt;List&lt;'a>> =</p>

<pre><code>let q stream =
    match p stream with
    | Failure -&gt; Success([], stream)
    | Success(x, rest) -&gt;  (Apply (Many p) (fun xs -&gt; x::xs)) rest
in q
</code></pre>

<p>```</p>

<p>which will run the input parser <code>p</code> as many times as possible until it fails and will return a list of the successfully parsed elements.</p>

<p>This new combinator allows us to build the following integer parser:</p>

<p>```fsharp
/// Parses (positive) integer numbers
let IntegerParser : Parser<int> =</p>

<pre><code>Apply (Many DigitParserInt) (List.reduce (fun x y -&gt; x * 10 + y))
</code></pre>

<p>```</p>

<p>that will parse integer numbers.</p>

<h3>Enough</h3>

<p>We could go like this forever but fortunately smarter people did it before and made their work freely available. The most famous library is <a href="http://www.haskell.org/haskellwiki/Parsec">Parsec</a> for Haskell but <a href="http://www.haskell.org/haskellwiki/Parsec#Parsec_clones_in_other_languages">adaptations have been made to other languages</a> including C++, Java, Python, Javascript among many.</p>

<p>I myself have written a <a href="https://github.com/santialbo/ParserCombinators">small library in F#</a> for the sake of learning and I used it to build a JSON parser. I think it can be a nice introduction parser combinators since it is not optimized in any way and the ideas can be seen more clearly.</p>

<p>I posted all the code snippets of this post <a href="http://tryfs.net/snippets/snippet-hw">here</a> to make it possible to try them online.</p>

<p>In my next post I will talk about monads in F# and explain how parser combinators is probably one of the better examples to understand what they are.</p>
]]></content>
  </entry>
  
</feed>
